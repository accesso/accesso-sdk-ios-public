// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.106 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AccessoExperiencePromoter
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AccessoCore
import CoreLocation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AccessoExperiencePromoterProvider : ObjectiveC.NSObject, AccessoExperiencePromoter.AccessoExperiencePromoterProviding {
  public static let sharedInstance: AccessoExperiencePromoter.AccessoExperiencePromoterProvider
  public var venueId: Swift.String?
  public var pushDeviceToken: Swift.String? {
    get
    set
  }
  public var beaconDetection: ((AccessoExperiencePromoter.AccessoBeaconRegion) -> Swift.Void)?
  public var beaconListenerStatus: AccessoExperiencePromoter.AccessoBeaconListenerStatus
  public var remoteConfig: AccessoCore.RemoteModuleDataConfiguration? {
    get
  }
  public func configure(remoteConfig: AccessoCore.RemoteModuleDataConfiguration? = nil, promptForLocationPermission: Swift.Bool = true, listenForBeacons: Swift.Bool = true, startUpdatingLocation: Swift.Bool = true, logLevel: AccessoCore.AccessoLog.LogLevel = .info) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func updatePushDeviceToken(pushDeviceToken: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getMessages(venueId: Swift.String? = nil) async throws -> [AccessoExperiencePromoter.AccessoMessage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func trackMessageAction(messageEvent: AccessoExperiencePromoter.AccessoMessageEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func trackMessageLinkTapped(messageLinkTappedEvent: AccessoExperiencePromoter.AccessoMessageLinkTappedEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func trackAppNotificationState(appNotificationStateEvent: AccessoExperiencePromoter.AccessoAppNotificationStateEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getMessageById(messageId: Swift.String) async throws -> AccessoExperiencePromoter.AccessoMessage
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func trackBeaconDetectChange(beaconStatus: AccessoExperiencePromoter.AccessoBeaconStatus, beaconEvent: AccessoExperiencePromoter.AccessoBeaconEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getBeaconRegions() async throws -> [AccessoExperiencePromoter.AccessoBeaconRegion]
  #endif
  public func startListeningForBeaconRegions(beaconRegions: [AccessoExperiencePromoter.AccessoBeaconRegion])
  public func stopListeningForBeaconRegions(beaconRegions: [AccessoExperiencePromoter.AccessoBeaconRegion]? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func getPointsOfInterest() async throws -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getDisplayCategories() async throws -> AccessoExperiencePromoter.AccessoDisplayCategories
  #endif
  public func searchPointsOfInterest(pointsOfInterest: [AccessoExperiencePromoter.AccessoPointOfInterest], searchCriteria: Swift.String) -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  public func getPointsOfInterestByCategories(categories: [AccessoExperiencePromoter.AccessoCategory], pointsOfInterest: [AccessoExperiencePromoter.AccessoPointOfInterest]) -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  @objc deinit
}
extension AccessoExperiencePromoter.AccessoExperiencePromoterProvider : CoreLocation.CLLocationManagerDelegate {
  public func promptForLocationPermission()
  public func startUpdatingLocation(for distanceInMeters: CoreLocation.CLLocationDistance = 5, timeInterval: Foundation.TimeInterval = TimeIntervalConstants.defaultLocationUpdateInterval)
  #if compiler(>=5.3) && $AsyncAwait
  public func trackDeviceLocation(locationInfo: AccessoExperiencePromoter.AccessoLocationInfo) async throws
  #endif
  @objc dynamic public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, monitoringDidFailFor region: CoreLocation.CLRegion?, withError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didStartMonitoringFor region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didDetermineState state: CoreLocation.CLRegionState, for region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
}
public protocol AccessoExperiencePromoterProviding {
  var pushDeviceToken: Swift.String? { get set }
  var beaconListenerStatus: AccessoExperiencePromoter.AccessoBeaconListenerStatus { get set }
  var beaconDetection: ((AccessoExperiencePromoter.AccessoBeaconRegion) -> Swift.Void)? { get set }
  func configure(remoteConfig: AccessoCore.RemoteModuleDataConfiguration?, promptForLocationPermission: Swift.Bool, listenForBeacons: Swift.Bool, startUpdatingLocation: Swift.Bool, logLevel: AccessoCore.AccessoLog.LogLevel) throws
  #if compiler(>=5.3) && $AsyncAwait
  func getMessages(venueId: Swift.String?) async throws -> [AccessoExperiencePromoter.AccessoMessage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func trackMessageAction(messageEvent: AccessoExperiencePromoter.AccessoMessageEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func trackMessageLinkTapped(messageLinkTappedEvent: AccessoExperiencePromoter.AccessoMessageLinkTappedEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func trackAppNotificationState(appNotificationStateEvent: AccessoExperiencePromoter.AccessoAppNotificationStateEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getMessageById(messageId: Swift.String) async throws -> AccessoExperiencePromoter.AccessoMessage
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func trackBeaconDetectChange(beaconStatus: AccessoExperiencePromoter.AccessoBeaconStatus, beaconEvent: AccessoExperiencePromoter.AccessoBeaconEvent) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getBeaconRegions() async throws -> [AccessoExperiencePromoter.AccessoBeaconRegion]
  #endif
  func startListeningForBeaconRegions(beaconRegions: [AccessoExperiencePromoter.AccessoBeaconRegion])
  func stopListeningForBeaconRegions(beaconRegions: [AccessoExperiencePromoter.AccessoBeaconRegion]?)
  #if compiler(>=5.3) && $AsyncAwait
  func getPointsOfInterest() async throws -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getDisplayCategories() async throws -> AccessoExperiencePromoter.AccessoDisplayCategories
  #endif
  func searchPointsOfInterest(pointsOfInterest: [AccessoExperiencePromoter.AccessoPointOfInterest], searchCriteria: Swift.String) -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  func getPointsOfInterestByCategories(categories: [AccessoExperiencePromoter.AccessoCategory], pointsOfInterest: [AccessoExperiencePromoter.AccessoPointOfInterest]) -> [AccessoExperiencePromoter.AccessoPointOfInterest]
  func promptForLocationPermission()
  func startUpdatingLocation(for distanceInMeters: CoreLocation.CLLocationDistance, timeInterval: Foundation.TimeInterval)
  #if compiler(>=5.3) && $AsyncAwait
  func trackDeviceLocation(locationInfo: AccessoExperiencePromoter.AccessoLocationInfo) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func updatePushDeviceToken(pushDeviceToken: Swift.String) async throws
  #endif
}
public enum AccessoBeaconStatus : Swift.String, Swift.Codable {
  case ENTER
  case EXIT
  case NONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AccessoBeaconEvent : Swift.Codable {
  public var appId: Swift.String?
  public var appUserId: Swift.String?
  public var appVersion: Swift.String?
  public var timestamp: Foundation.Date?
  public var beacons: [AccessoExperiencePromoter.AccessoBeaconRegion]?
  public init(appId: Swift.String? = nil, appUserId: Swift.String? = nil, appVersion: Swift.String? = nil, timestamp: Foundation.Date? = nil, beacons: [AccessoExperiencePromoter.AccessoBeaconRegion]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoBeaconRegion : Swift.Codable {
  public var id: Swift.String {
    get
  }
  public var proximityUUID: Swift.String
  public var major: Swift.Int?
  public var minor: Swift.Int?
  public var mfrCode: Swift.String?
  public var ttl: Swift.Int?
  public var signalPower: Swift.Int?
  public var outOfVenue: Swift.Bool?
  public var beaconStatus: AccessoExperiencePromoter.AccessoBeaconStatus?
  public init(proximityUUID: Swift.String, major: Swift.Int? = nil, minor: Swift.Int? = nil, mfrCode: Swift.String? = nil, ttl: Swift.Int? = nil, signalPower: Swift.Int? = nil, outOfVenue: Swift.Bool? = nil, beaconStatus: AccessoExperiencePromoter.AccessoBeaconStatus? = nil)
  public func asDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoDisplayCategories : Swift.Codable {
  public let categories: [AccessoExperiencePromoter.AccessoCategory]
  public let poi: [AccessoExperiencePromoter.AccessoPointOfInterest]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoCategory : Swift.Codable {
  public let id: Swift.String
  public let label: Swift.String?
  public let poiDetailsTitle: Swift.String?
  public let statusClosedMessage: Swift.String?
  public let parent: Swift.String?
  public let displayOrder: Swift.Int?
  public let icons: [AccessoExperiencePromoter.AccessoIcon]?
  public let activeIcons: [AccessoExperiencePromoter.AccessoIcon]?
  public let poi: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccessoBeaconListenerStatus {
  case listening
  case stopped
  case unknown
  public static func == (a: AccessoExperiencePromoter.AccessoBeaconListenerStatus, b: AccessoExperiencePromoter.AccessoBeaconListenerStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccessoRegionEvent : Swift.Codable {
  public var appId: Swift.String?
  public var appUserId: Swift.String?
  public var platform: Swift.String?
  public var pushDeviceToken: Swift.String?
  public var userId: Swift.String?
  public var location: AccessoExperiencePromoter.AccessoLocationInfo?
  public func asDictionary() -> [Swift.String : Any]
  public init(appId: Swift.String? = nil, appUserId: Swift.String? = nil, platform: Swift.String? = "IOS", pushDeviceToken: Swift.String? = nil, userId: Swift.String? = nil, location: AccessoExperiencePromoter.AccessoLocationInfo? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoLocationInfo : Swift.Codable {
  public var lat: Swift.Double
  public var lon: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var locationSource: Swift.String
  public init(lat: Swift.Double, lon: Swift.Double, horizontalAccuracy: Swift.Double, locationSource: Swift.String = "DEVICE")
  public func asDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoMessage : Swift.Codable {
  public var id: Swift.String
  public var subject: Swift.String?
  public var body: Swift.String?
  public var subTitle: Swift.String?
  public var appUserId: Swift.String?
  public var venueId: Swift.String?
  public var type: Swift.Int?
  public var publishTime: Foundation.Date?
  public var publishTimestamp: Swift.String?
  public var expireTime: Foundation.Date?
  public var expireTimestamp: Swift.String?
  public var experienceId: Swift.String?
  public var experienceTitle: Swift.String?
  public var isRead: Swift.Bool
  public var images: [AccessoExperiencePromoter.AccessoMessageImage]?
  public var links: [AccessoExperiencePromoter.AccessoMessageLink]?
  public var pushActioned: Swift.Bool
  public init(id: Swift.String, subject: Swift.String? = nil, body: Swift.String? = nil, subTitle: Swift.String? = nil, appUserId: Swift.String? = nil, venueId: Swift.String? = nil, type: Swift.Int? = nil, publishTime: Foundation.Date? = nil, publishTimestamp: Swift.String? = nil, expireTime: Foundation.Date? = nil, expireTimestamp: Swift.String? = nil, experienceId: Swift.String? = nil, experienceTitle: Swift.String? = nil, isRead: Swift.Bool = false, images: [AccessoExperiencePromoter.AccessoMessageImage]? = nil, links: [AccessoExperiencePromoter.AccessoMessageLink]? = nil, pushActioned: Swift.Bool = false)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension AccessoExperiencePromoter.AccessoMessage : Swift.Hashable {
  public static func == (lhs: AccessoExperiencePromoter.AccessoMessage, rhs: AccessoExperiencePromoter.AccessoMessage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AccessoEventCommonData : Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get set }
  var appUserId: Swift.String? { get set }
  var appId: Swift.String { get set }
  var version: Swift.String { get set }
  var platform: Swift.String { get set }
  var timestamp: Swift.String? { get set }
  var pushDeviceToken: Swift.String? { get set }
  var venueId: Swift.String? { get set }
}
public struct AccessoMessageEvent : AccessoExperiencePromoter.AccessoEventCommonData {
  public var id: Swift.String
  public var appUserId: Swift.String?
  public var appId: Swift.String
  public var version: Swift.String
  public var platform: Swift.String
  public var timestamp: Swift.String?
  public var pushDeviceToken: Swift.String?
  public var venueId: Swift.String?
  public var messageId: Swift.String
  public var action: AccessoExperiencePromoter.AccessoMessageAction?
  public var eventType: AccessoExperiencePromoter.AccessoMessageEventType
  public init(id: Swift.String = UUID().uuidString, appUserId: Swift.String? = nil, appId: Swift.String, version: Swift.String = "2.0", platform: Swift.String = "iOS", timestamp: Swift.String? = nil, pushDeviceToken: Swift.String? = nil, venueId: Swift.String? = nil, messageId: Swift.String, action: AccessoExperiencePromoter.AccessoMessageAction? = nil, eventType: AccessoExperiencePromoter.AccessoMessageEventType = .message)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoMessageLinkTappedEvent : AccessoExperiencePromoter.AccessoEventCommonData {
  public var id: Swift.String
  public var appUserId: Swift.String?
  public var appId: Swift.String
  public var version: Swift.String
  public var platform: Swift.String
  public var timestamp: Swift.String?
  public var pushDeviceToken: Swift.String?
  public var venueId: Swift.String?
  public var messageId: Swift.String
  public var linkId: Swift.String
  public var linkType: Swift.String?
  public var eventType: AccessoExperiencePromoter.AccessoMessageEventType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoAppNotificationStateEvent : AccessoExperiencePromoter.AccessoEventCommonData {
  public var id: Swift.String
  public var appUserId: Swift.String?
  public var appId: Swift.String
  public var version: Swift.String
  public var platform: Swift.String
  public var timestamp: Swift.String?
  public var pushDeviceToken: Swift.String?
  public var venueId: Swift.String?
  public var state: AccessoExperiencePromoter.AccessoAppNotificationState
  public var eventType: AccessoExperiencePromoter.AccessoMessageEventType
  public init(id: Swift.String = UUID().uuidString, appUserId: Swift.String? = nil, appId: Swift.String, version: Swift.String = "2.0", platform: Swift.String = "iOS", timestamp: Swift.String? = nil, pushDeviceToken: Swift.String? = nil, venueId: Swift.String? = nil, state: AccessoExperiencePromoter.AccessoAppNotificationState = .disabled, eventType: AccessoExperiencePromoter.AccessoMessageEventType = .notificationState)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccessoMessageEventType : Swift.String, Swift.Codable {
  case message
  case messageLinkTapped
  case notificationState
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AccessoMessageAction : Swift.String, Swift.Codable {
  case pushWhileOpen
  case pushWhileNotOpen
  case read
  case received
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AccessoMessageLink : Swift.Codable {
  public init(type: Swift.String? = nil, label: Swift.String? = nil, target: Swift.String? = nil, appNav: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoMessageImage : Swift.Codable {
  public var identifier: Swift.String?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var resolution: Swift.String?
  public var url: Swift.String?
  public init(identifier: Swift.String? = nil, width: Swift.Int? = nil, height: Swift.Int? = nil, resolution: Swift.String? = nil, url: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccessoAppNotificationState : Swift.String, Swift.Codable {
  case enabled
  case disabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AccessoPointOfInterest : Swift.Codable {
  public let id: Swift.String
  public let label: Swift.String
  public let description: Swift.String?
  public let status: AccessoExperiencePromoter.AccessoPoiStatus?
  public let images: [AccessoExperiencePromoter.AccessoImage]?
  public let details: [AccessoExperiencePromoter.AccessoPoiIDetail]?
  public let tags: [AccessoExperiencePromoter.AccessoPoiTag]?
  public let location: AccessoExperiencePromoter.AccessoLocation?
  public let sticker: AccessoExperiencePromoter.AccessoSticker?
  public let layoutType: AccessoExperiencePromoter.AccessoLayoutType?
  public let beacons: [AccessoExperiencePromoter.AccessoBeaconRegion]?
  public let type: Swift.String?
  public init(id: Swift.String, label: Swift.String, description: Swift.String? = nil, status: AccessoExperiencePromoter.AccessoPoiStatus? = nil, images: [AccessoExperiencePromoter.AccessoImage]? = nil, details: [AccessoExperiencePromoter.AccessoPoiIDetail]? = nil, tags: [AccessoExperiencePromoter.AccessoPoiTag]? = nil, location: AccessoExperiencePromoter.AccessoLocation? = nil, sticker: AccessoExperiencePromoter.AccessoSticker? = nil, layoutType: AccessoExperiencePromoter.AccessoLayoutType? = nil, beacons: [AccessoExperiencePromoter.AccessoBeaconRegion]? = nil, type: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoSticker : Swift.Codable {
  public let id: Swift.String
  public let label: Swift.String?
  public let images: [AccessoExperiencePromoter.AccessoImage]?
  public init(id: Swift.String, label: Swift.String? = nil, images: [AccessoExperiencePromoter.AccessoImage]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoImage : Swift.Codable {
  public let resolution: AccessoExperiencePromoter.AccessoResolution?
  public let src: Swift.String?
  public var height: Swift.Int16?
  public var width: Swift.Int16?
  public init(resolution: AccessoExperiencePromoter.AccessoResolution? = nil, src: Swift.String? = nil, height: Swift.Int16? = nil, width: Swift.Int16? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoPoiIDetail : Swift.Codable {
  public var id: Swift.String?
  public var label: Swift.String?
  public var description: Swift.String?
  public var images: [AccessoExperiencePromoter.AccessoImage]?
  public init(id: Swift.String? = nil, label: Swift.String? = nil, description: Swift.String? = nil, images: [AccessoExperiencePromoter.AccessoImage]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoIcon : Swift.Codable {
  public let resolution: AccessoExperiencePromoter.AccessoResolution?
  public let src: Swift.String?
  public init(resolution: AccessoExperiencePromoter.AccessoResolution? = nil, src: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccessoResolution : Swift.String, Swift.Codable {
  case mdpi
  case xhdpi
  case xxxhdpi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AccessoLayoutType : Swift.String, Swift.Codable {
  case landmark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AccessoLocation : Swift.Codable {
  public let horizontalAccuracy: Swift.Int?
  public let lat: Swift.Double
  public let lon: Swift.Double
  public init(horizontalAccuracy: Swift.Int? = nil, lat: Swift.Double, lon: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoPoiTag : Swift.Codable {
  public let name: Swift.String?
  public let value: Swift.String?
  public let label: Swift.String?
  public let valueLabel: Swift.String?
  public let uiVisible: Swift.Bool?
  public let displayOrder: Swift.String?
  public let icons: [AccessoExperiencePromoter.AccessoIcon]?
  public let action: AccessoExperiencePromoter.AccessoPoiAction?
  public init(name: Swift.String? = nil, value: Swift.String? = nil, label: Swift.String? = nil, valueLabel: Swift.String? = nil, uiVisible: Swift.Bool? = nil, displayOrder: Swift.String? = nil, icons: [AccessoExperiencePromoter.AccessoIcon]? = nil, action: AccessoExperiencePromoter.AccessoPoiAction? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessoPoiAction : Swift.Codable {
  public let module: Swift.String
  public let options: [Swift.String : Swift.String?]?
  public init(module: Swift.String, options: [Swift.String : Swift.String?]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccessoOperationalStatus : Swift.String, Swift.Codable {
  case closed
  case open
  case down
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AccessoPoiStatus : Swift.Codable {
  public let poiID: Swift.String?
  public let externalKey: Swift.String?
  public let isOpen: Swift.Bool
  public let lastUpdateTime: Swift.String?
  public let waitTime: Swift.Int?
  public let lastChanged: Swift.String?
  public let operationalStatus: AccessoExperiencePromoter.AccessoOperationalStatus?
  public init(poiID: Swift.String? = nil, externalKey: Swift.String? = nil, isOpen: Swift.Bool, lastUpdateTime: Swift.String? = nil, waitTime: Swift.Int? = nil, lastChanged: Swift.String? = nil, operationalStatus: AccessoExperiencePromoter.AccessoOperationalStatus? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TimeIntervalConstants {
  public static let defaultLocationUpdateInterval: Swift.Double
  public static let minimimLocationUpdateInterval: Swift.Double
}
extension Swift.Optional where Wrapped : Swift.Collection {
  public var isNilOrEmpty: Swift.Bool {
    get
  }
}
extension Swift.Sequence {
  public func sorted<T>(by keyPath: Swift.KeyPath<Self.Element, T>) -> [Self.Element] where T : Swift.Comparable
}
extension Swift.Array {
  public subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get
  }
}
extension Foundation.Calendar {
  public static var venueCurrent: Foundation.Calendar
  public func date(withDay day: Foundation.Date, time: Foundation.Date) -> Foundation.Date?
}
extension Foundation.Date {
  public static var yesterday: Foundation.Date? {
    get
  }
  public static var tomorrow: Foundation.Date? {
    get
  }
  public var dayBefore: Foundation.Date? {
    get
  }
  public var dayAfter: Foundation.Date? {
    get
  }
  public var noon: Foundation.Date? {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var year: Swift.Int {
    get
  }
  public var isLastDayOfMonth: Swift.Bool {
    get
  }
  public func dateWithTime(formatter: Foundation.DateFormatter?, locale: Foundation.Locale?, timeZone: Foundation.TimeZone?) -> Swift.String
  public func date(formatter: Foundation.DateFormatter?, locale: Foundation.Locale?, timeZone: Foundation.TimeZone?) -> Swift.String
  public func dateString(formatter: Foundation.DateFormatter = DateFormatter(), dateStyle: Foundation.DateFormatter.Style = .short, timeStyle: Foundation.DateFormatter.Style = .none, locale: Foundation.Locale? = Locale.current, timeZone: Foundation.TimeZone? = TimeZone.current, template: Swift.String?) -> Swift.String
  public func range(formatter: Foundation.DateIntervalFormatter = DateIntervalFormatter(), toDate: Foundation.Date, locale: Foundation.Locale? = Locale.current, timeZone: Foundation.TimeZone? = TimeZone.current, dateStyle: Foundation.DateIntervalFormatter.Style = .short, timeStyle: Foundation.DateIntervalFormatter.Style = .short, template: Swift.String? = nil) -> Swift.String
  public func rangeFromDateFormatter(formatter: Foundation.DateFormatter = DateFormatter(), toDate: Foundation.Date, locale: Foundation.Locale? = Locale.current, timeZone: Foundation.TimeZone? = TimeZone.current, dateStyle: Foundation.DateFormatter.Style = .medium, timeStyle: Foundation.DateFormatter.Style = .medium, template: Swift.String? = nil) -> Swift.String
  public var beginningOfDay: Foundation.Date {
    get
  }
  public var isToday: Swift.Bool {
    get
  }
  public var isTomorrow: Swift.Bool {
    get
  }
  public var isYesterday: Swift.Bool {
    get
  }
  public func isBetween(startDate: Foundation.Date, endDate: Foundation.Date) -> Swift.Bool
  public var endOfDay: Foundation.Date {
    get
  }
  public func isFullDay(end: Foundation.Date) -> Swift.Bool
  public func spaceSeparatedMonthDayYear(timeZone: Foundation.TimeZone?) -> Swift.String
  public static func date(fromString dateString: Swift.String) -> Foundation.Date?
  public func daysBetween(endDate: Foundation.Date, calendar: Foundation.Calendar = Calendar.current) -> Swift.Int
  public func monthDayYearHoursMinutes(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func hoursAndMinutes(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func monthString(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func dayString(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func monthDay(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func monthNameDay(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func monthDayYear(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func getDayOfWeek(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.Int
  public func getDayOfWeekString(timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public static func format(interval: Foundation.TimeInterval) -> Swift.String?
}
extension Foundation.DateFormatter {
  public static let fullISO8601: Foundation.DateFormatter
}
extension Swift.String {
  public var numberOfWords: Swift.Int {
    get
  }
  public var isValidUrl: Swift.Bool {
    get
  }
  public var urlValue: Foundation.URL? {
    get
  }
  public func generateQRCode() -> UIKit.UIImage?
  public func capitalizingFirstLetter() -> Swift.String
  public func versionCompare(_ otherVersion: Swift.String) -> Foundation.ComparisonResult
}
extension Swift.Optional where Wrapped == Swift.String {
  public var isNilOrEmpty: Swift.Bool {
    get
  }
}
extension Swift.Optional where Wrapped : Swift.LosslessStringConvertible {
  public var stringValue: Swift.String? {
    get
  }
}
extension AccessoExperiencePromoter.AccessoBeaconStatus : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoBeaconStatus : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoBeaconStatus : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoBeaconListenerStatus : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoBeaconListenerStatus : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoMessageEventType : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoMessageEventType : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoMessageEventType : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoMessageAction : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoMessageAction : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoMessageAction : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoAppNotificationState : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoAppNotificationState : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoAppNotificationState : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoResolution : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoResolution : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoResolution : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoLayoutType : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoLayoutType : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoLayoutType : Swift.RawRepresentable {}
extension AccessoExperiencePromoter.AccessoOperationalStatus : Swift.Equatable {}
extension AccessoExperiencePromoter.AccessoOperationalStatus : Swift.Hashable {}
extension AccessoExperiencePromoter.AccessoOperationalStatus : Swift.RawRepresentable {}
