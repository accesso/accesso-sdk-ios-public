// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AccessoCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers public class Identity {
  #if compiler(>=5.3) && $AsyncAwait
  public func getAnonymousToken() async throws -> AccessoCore.AnonymousToken
  #endif
  @objc deinit
}
public enum IdentityError : Swift.Error {
  case anonymousTokenError
  public static func == (a: AccessoCore.IdentityError, b: AccessoCore.IdentityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AnonymousToken : Swift.Codable {
  public let accessToken: Swift.String
  public let tokenType: Swift.String?
  public let refreshToken: Swift.String
  public let expiresIn: Foundation.TimeInterval
  public let scope: Swift.String?
  public let accountId: Swift.String?
  public let userType: Swift.String?
  public let venueId: Swift.String?
  public let appUserId: Swift.String?
  public let organization: Swift.String?
  public let amr: [AccessoCore.Amr]?
  public let iss: Swift.String?
  public let phoneNumber: Swift.String?
  public let source: Swift.String?
  public let iat: Swift.Int
  public let email: Swift.String?
  public let uuid: Swift.String?
  public let jti: Swift.String?
  public let appId: Swift.String?
  public var accessTokenExpirationDate: Foundation.Date {
    get
  }
  public var refreshTokenExpirationDate: Foundation.Date? {
    get
  }
  public init(accessToken: Swift.String, tokenType: Swift.String? = nil, refreshToken: Swift.String, expiresIn: Foundation.TimeInterval, scope: Swift.String? = nil, accountId: Swift.String? = nil, userType: Swift.String? = nil, venueId: Swift.String? = nil, appUserId: Swift.String? = nil, organization: Swift.String? = nil, amr: [AccessoCore.Amr]? = nil, iss: Swift.String? = nil, phoneNumber: Swift.String? = nil, source: Swift.String? = nil, iat: Swift.Int, email: Swift.String? = nil, uuid: Swift.String? = nil, jti: Swift.String? = nil, appId: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Amr : Swift.Codable {
  public let authority: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LogParameters {
  public init(subsystem: AccessoCore.Log.Subsystem = .hostApp, category: AccessoCore.Log.Category = .applevel, access: AccessoCore.Log.AccessLevel = .publicAccess, level: AccessoCore.Log.LogLevel = .info)
}
@objc @_inheritsConvenienceInitializers open class Log : ObjectiveC.NSObject {
  public enum Subsystem : Swift.String {
    case hostApp
    case core
    case experiencePromoter
    case entitlements
    case queueing
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Category : Swift.String {
    case applevel
    case ui
    case network
    case database
    case startup
    case initialize
    case shutdown
    case parsing
    case file
    case config
    case location
    case analytics
    case user
    case cache
    case barcode
    case identity
    case uiTest
    case unitTest
    case moduleApp
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AccessLevel : Swift.String {
    case publicAccess
    case privateAccess
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum LogLevel : Swift.Int {
    case debug
    case info
    case warning
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static var currentLogLevel: AccessoCore.Log.LogLevel
  @discardableResult
  public class func logEvent(_ message: Swift.String, parameters: AccessoCore.LogParameters = LogParameters()) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public protocol ApiRouter {
  var method: Swift.String { get }
  var methodUri: Swift.String { get }
  func urlString(for config: AccessoCore.Configuration) -> Swift.String
}
extension AccessoCore.ApiRouter {
  public func urlString(for config: AccessoCore.Configuration) -> Swift.String
}
public protocol Endpoint {
  var path: Swift.String { get }
  func getUrl(config: AccessoCore.Configuration?) -> Swift.String
}
public enum CoreError : Swift.String, Swift.Error {
  case missingVenueId
  case missingConfig
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case CONNECT
  case DELETE
  case GET
  case HEAD
  case OPTIONS
  case PATCH
  case POST
  case PUT
  case TRACE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Configuration : Swift.Decodable {
  public var baseURL: Swift.String
  public var appID: Swift.String?
  public var identityUsername: Swift.String?
  public var identityPassword: Swift.String?
  public var username: Swift.String?
  public var password: Swift.String?
  public var preferredLanguage: Swift.String
  public var venueId: Swift.String?
  public var customerId: Swift.String?
  public var appUserID: Swift.String?
  public var appVersion: Swift.String?
  public static func config(bundle: Foundation.Bundle = Bundle.main, resource: Swift.String = "Accesso-Info") -> AccessoCore.Configuration?
  public init(from decoder: any Swift.Decoder) throws
}
public class NetworkSession : AccessoCore.NetworkSessionProviding {
  public init(session: Foundation.URLSession = URLSession(configuration: .ephemeral), config: AccessoCore.Configuration)
  #if compiler(>=5.3) && $AsyncAwait
  public func performRequest(url: Swift.String, method: AccessoCore.HTTPMethod, accessToken: Swift.String?, queryItems: [Foundation.URLQueryItem]? = nil, body: (any Swift.Encodable)?) async throws -> (Foundation.Data, Foundation.HTTPURLResponse)
  #endif
  @objc deinit
}
public protocol NetworkSessionProviding {
  #if compiler(>=5.3) && $AsyncAwait
  func performRequest(url: Swift.String, method: AccessoCore.HTTPMethod, accessToken: Swift.String?, queryItems: [Foundation.URLQueryItem]?, body: (any Swift.Encodable)?) async throws -> (Foundation.Data, Foundation.HTTPURLResponse)
  #endif
}
public enum NetworkingError : Swift.Error {
  case connectionFailed
  case requestTimeout
  case serverError(statusCode: Swift.Int)
  case unknownError
}
public protocol AVMediaAuthorizationStatusProviding {
  func authorizationStatus(for mediaType: AVFoundation.AVMediaType) -> AVFoundation.AVAuthorizationStatus
}
public class AVMediaAuthorizationStatusProvider : AccessoCore.AVMediaAuthorizationStatusProviding {
  public init()
  public func authorizationStatus(for mediaType: AVFoundation.AVMediaType) -> AVFoundation.AVAuthorizationStatus
  @objc deinit
}
public class CameraProvider {
  public init(avMediaAuthorizationStatusProvider: any AccessoCore.AVMediaAuthorizationStatusProviding)
  public class func createCameraManager(avMediaAuthorizationStatusProvider: any AccessoCore.AVMediaAuthorizationStatusProviding = AVMediaAuthorizationStatusProvider()) -> AccessoCore.CameraProvider
  #if compiler(>=5.3) && $AsyncAwait
  public func isAuthorizedForVideo(forceRequest: Swift.Bool = false) async -> Swift.Bool
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CoreProvider {
  public static var shared: AccessoCore.CoreProvider {
    get
  }
  public var configuration: AccessoCore.Configuration? {
    get
  }
  public var identity: AccessoCore.Identity {
    get
  }
  public var networkSession: AccessoCore.NetworkSession {
    get
  }
  public var cameraManager: AccessoCore.CameraProvider {
    get
  }
  public static func configure(using configuration: AccessoCore.Configuration? = Configuration.config(), logLevel: AccessoCore.Log.LogLevel = .info)
  @objc deinit
}
extension AccessoCore.IdentityError : Swift.Equatable {}
extension AccessoCore.IdentityError : Swift.Hashable {}
extension AccessoCore.Log.Subsystem : Swift.Equatable {}
extension AccessoCore.Log.Subsystem : Swift.Hashable {}
extension AccessoCore.Log.Subsystem : Swift.RawRepresentable {}
extension AccessoCore.Log.Category : Swift.Equatable {}
extension AccessoCore.Log.Category : Swift.Hashable {}
extension AccessoCore.Log.Category : Swift.RawRepresentable {}
extension AccessoCore.Log.AccessLevel : Swift.Equatable {}
extension AccessoCore.Log.AccessLevel : Swift.Hashable {}
extension AccessoCore.Log.AccessLevel : Swift.RawRepresentable {}
extension AccessoCore.Log.LogLevel : Swift.Equatable {}
extension AccessoCore.Log.LogLevel : Swift.Hashable {}
extension AccessoCore.Log.LogLevel : Swift.RawRepresentable {}
extension AccessoCore.CoreError : Swift.Equatable {}
extension AccessoCore.CoreError : Swift.Hashable {}
extension AccessoCore.CoreError : Swift.RawRepresentable {}
extension AccessoCore.HTTPMethod : Swift.Equatable {}
extension AccessoCore.HTTPMethod : Swift.Hashable {}
extension AccessoCore.HTTPMethod : Swift.RawRepresentable {}
