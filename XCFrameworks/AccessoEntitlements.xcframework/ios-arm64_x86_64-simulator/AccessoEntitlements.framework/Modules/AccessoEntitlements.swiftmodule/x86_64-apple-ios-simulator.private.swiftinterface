// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.106 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AccessoEntitlements
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AccessoCore
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class AccessoEntitlementsProvider : AccessoEntitlements.AccessoEntitlementsProviding {
  public static let sharedInstance: AccessoEntitlements.AccessoEntitlementsProvider
  public func configure(remoteConfig: AccessoCore.RemoteModuleDataConfiguration? = nil, logLevel: AccessoCore.AccessoLog.LogLevel = .info) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func claimEntitlement(registrationType claimType: AccessoEntitlements.ClaimEntitlementType) async throws -> AccessoEntitlements.ClaimEntitlementResult
  #endif
  @objc deinit
}
public protocol AccessoEntitlementsProviding {
  #if compiler(>=5.3) && $AsyncAwait
  func claimEntitlement(registrationType: AccessoEntitlements.ClaimEntitlementType) async throws -> AccessoEntitlements.ClaimEntitlementResult
  #endif
}
public enum ClaimEntitlementType {
  case barcode(code: Swift.String)
  case orderId(id: Swift.String, orderEmail: Swift.String)
}
public struct ClaimEntitlementStatus : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClaimEntitlementResult : Swift.Equatable {
  case claimed(status: AccessoEntitlements.ClaimEntitlementStatus)
  case claimedButProcessing(status: AccessoEntitlements.ClaimEntitlementStatus)
  case notFound
  public static func == (lhs: AccessoEntitlements.ClaimEntitlementResult, rhs: AccessoEntitlements.ClaimEntitlementResult) -> Swift.Bool
}
